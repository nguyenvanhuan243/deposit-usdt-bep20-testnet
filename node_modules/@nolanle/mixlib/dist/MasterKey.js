"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MasterKey = void 0;
const ecc = __importStar(require("tiny-secp256k1"));
const bip32_1 = __importDefault(require("bip32"));
const Account_1 = require("./Account");
const bip32 = (0, bip32_1.default)(ecc);
class MasterKey {
    /**
     * Contructor
     * @param id
     * @param name
     * @param mnemonic
     * @param seed
     */
    constructor(id, name, mnemonic, seed) {
        this.id = id;
        this.name = name;
        this.seed = seed;
        this.mnemonic = mnemonic;
    }
    /**
     * Derive master key to child key via blockchain
     */
    derive(network) {
        const path = `m/44'/${network.type}'/0'/0/0`;
        const buffer = Buffer.from(this.seed, 'hex');
        const root = bip32.fromSeed(buffer);
        return new Account_1.Account(network, root.derivePath(path));
    }
}
exports.MasterKey = MasterKey;
