"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountETH = void 0;
const web3_1 = __importDefault(require("web3"));
const lodash_1 = require("lodash");
const ethereumjs_wallet_1 = __importDefault(require("ethereumjs-wallet"));
class AccountETH {
    constructor(xpub, xprv) {
        this.base = 1e18;
        this.xpub = xpub;
        this.xprv = xprv;
        this.wallet = this.xprv
            ? ethereumjs_wallet_1.default.fromExtendedPrivateKey(this.xprv.toBase58())
            : ethereumjs_wallet_1.default.fromExtendedPublicKey(this.xpub.toBase58());
        this.endpoint =
            'https://goerli.infura.io/v3/e68e9eb0a4aa4c23840da2924a83b392';
        this.web3 = new web3_1.default(new web3_1.default.providers.HttpProvider(this.endpoint));
    }
    toPrivateKey() {
        return this.wallet.getPrivateKey().toString('hex');
    }
    toAddress() {
        return this.wallet.getChecksumAddressString();
    }
    validateAddress(address) {
        return this.web3.utils.isAddress(address);
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let balance = '';
            const destAddr = address || this.toAddress();
            yield this.web3.eth.getBalance(destAddr).then(value => (balance = value));
            return this.web3.utils.fromWei(balance, 'ether') / 1;
        });
    }
    getTransactions(address) { }
    createTransaction(address, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const amountToSend = this.web3.utils.toWei(`${amount}`, 'ether');
            const gasPrice = yield this.web3.eth.getGasPrice();
            const estimatedFee = yield this.web3.eth.estimateGas({
                to: address,
                data: '0x',
            });
            return {
                from: this.toAddress(),
                to: address,
                value: amountToSend,
                gasPrice: gasPrice,
                gas: estimatedFee,
            };
        });
    }
    getEstimatedFee(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const gasPrice = yield this.web3.eth.getGasPrice();
            const estimatedFee = yield this.web3.eth.estimateGas({
                to: address,
                data: '0x',
            });
            const calculate = parseFloat(gasPrice) * estimatedFee;
            return (this.web3.utils.fromWei(`${calculate}`, 'ether') /
                1);
        });
    }
    estimateMaxTransfer(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const balance = yield this.getBalance();
            const fee = yield this.getEstimatedFee(address);
            const estimated = balance > fee ? (0, lodash_1.subtract)(balance * this.base, fee * this.base) : 0;
            return estimated / this.base;
        });
    }
    sendTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const signedRawTx = yield this.web3.eth.accounts.signTransaction(tx, this.toPrivateKey());
                const transaction = yield this.web3.eth.sendSignedTransaction(signedRawTx.rawTransaction);
                return transaction.transactionHash;
            }
            catch (error) {
                return null;
            }
        });
    }
}
exports.AccountETH = AccountETH;
